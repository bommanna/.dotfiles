" Vim configuration file
"
"
" Standing on the shoulders of giants:
"
" * http://learnvimscriptthehardway.stevelosh.com/
" * https://github.com/skwp/dotfiles/blob/master/vimrc
" * http://amix.dk/vim/vimrc.html
" * https://github.com/scrooloose/vimfiles/blob/master/vimrc
" * https://github.com/bling/dotvim/blob/master/vimrc
" * https://github.com/tpope/vim-sensible
" * https://github.com/spf13/spf13-vim
" * https://github.com/r00k/dotfiles/blob/master/vimrc
" * https://github.com/jbro/vim/blob/master/vimrc
"
"
" Features inspirations from:
"
" * https://github.com/airblade/vim-rooter
" * https://github.com/tpope/vim-unimpaired
" * https://github.com/mileszs/ack.vim
" * https://github.com/bling/vim-bufferline
"
"

" CONFIGURATION:

" runtime path
let g:runtimepath = $HOME . '/.config/vim'
let &runtimepath .= ',' . g:runtimepath

" environment variables
let g:vimrc_disable_plugins = $VIM_DISABLE_PLUGINS == 1                       " disable all plugins
let g:vimrc_disable_options = $VIM_DISABLE_OPTIONS == 1                       " disable all options (still keeps nocompatible)
let g:vimrc_disable_mappings = $VIM_DISABLE_MAPPINGS == 1                     " disable mappings
let g:vimrc_disable_autocommands = $VIM_DISABLE_AUTOCOMMANDS == 1             " disable autocommands

" miscellaneous
let g:project_root_markers = ['.git', '.git/', 'venv/']                       " markers to find project root directory
let g:tex_flavor = 'latex'                                                    " use tex filetype by default instead of plaintex
let g:tex_comment_nospell = 1                                                 " don't spellcheck inside tex comments
let g:netrw_home = g:runtimepath . '/cache/netrw'                             " cache directory for file explorer


" PLUGINS AND COLORSCHEMES:

if !g:vimrc_disable_plugins && !exists('s:loaded_plugins')

  filetype off                                                                " safe plugin loading
  set nocompatible                                                            " one more time

  " Ctrlp
  let g:ctrlp_by_filename = 1                                                 " search by filename by default
  let g:ctrlp_cache_dir = g:runtimepath . '/cache/ctrlp'                      " directory to store cached filepaths
  let g:ctrlp_clear_cache_on_exit = 1                                         " clear cache between sessions (<F5> to clear manually)
  let g:ctrlp_cmd = 'CtrlPMRU'                                                " search MRU files by default
  let g:ctrlp_extensions = ['tag']                                            " add tag explorer
  let g:ctrlp_follow_symlinks = 1                                             " follow symbolic links
  let g:ctrlp_lazy_update = 100                                               " wait 250ms after typing before refreshing
  let g:ctrlp_mruf_exclude='.git'                                             " don't remember these files (for Vim help files)
  let g:ctrlp_mruf_relative=1                                                 " only show MRU files in current working directory
  let g:ctrlp_regexp = 0                                                      " use regexp as default search mode
  let g:ctrlp_user_command = 'ack %s -f'                                      " use ack as search index
  let g:ctrlp_working_path_mode = ''                                          " use lcd as ctrlp directory

  " Cursorcross
  let g:cursorcross_dynamic = 1                                               " enable automatic cursorcolumn and cursorline handling
  let g:cursorcross_exceptions = ['tex', 'qf', 'scratch', 'taglist']          " disable cursorcross for these filetypes

  " EasyMotion
  let g:EasyMotion_leader_key = "'"                                           " ' key is unbound in normal and visual mode below
  let g:EasyMotion_startofline = 0                                            " stay in current column when using j/k motions

  " Gundo
  let g:gundo_preview_height = 12                                             " height of diff preview window
  let g:gundo_width = 60                                                      " width of gundo window
  let g:gundo_help = 0                                                        " show help
  let g:gundo_preview_bottom = 0                                              " use full width for diff preview window

  " Jedi
  let g:jedi#auto_vim_initialization = 0                                      " manual init
  let g:jedi#auto_vim_configuration = 0                                       " manual mapping and 'completeopt'
  let g:jedi#popup_select_first = 0                                           " don't select anything
  let g:jedi#use_tabs_not_buffers = 1                                         " always
  let g:jedi#popup_on_dot = 0                                                 " manual completion

  " LatexBox
  let g:LatexBox_completion_close_braces = 0                                  " don't close braces automatically
  let g:LatexBox_Folding = 0                                                  " special folding for latex
  let g:LatexBox_split_width = 60                                             " width of table of contents

  " Locate
  let g:locate_highlight = 'pandocDefinitionTerm'                             " highlighting style for matches
  let g:locate_jump_to = 'closest'                                            " jump to next match

  " Scratch
  let g:scratch_height = 10                                                   " height of scratch window

  " Surround
  let g:surround_no_mappings = 1                                              " default mappings are bad

  " Syntastic
  let g:syntastic_check_on_open = 1                                           " check syntax when opening file
  let g:syntastic_check_on_wq = 0                                             " check when closing
  let g:syntastic_enable_balloons = 0                                         " show balloons when mouseing over errors
  let g:syntastic_mode_map = {'mode': 'active'}                               " check automatically in general
  let g:syntastic_auto_loc_list = 0                                           " never update location list automatically
  let g:syntastic_auto_jump = 0                                               " this option forces location list updates
  let g:syntastic_always_populate_loc_list = 0                                " default but to be safe
  let g:syntastic_loc_list_height = 20                                        " height of location list window
  let g:syntastic_echo_current_error = 1                                      " echo current error in command line
  let g:syntastic_python_checkers = ['python']                                " pylint is too slow to check actively
  let g:syntastic_coffee_checkers = ['coffee']                                " coffeelint is too slow to check actively
  let g:syntastic_manual = {'python': ['pylint'], 'coffee': ['coffeelint']}   " custom option to run manual checks with extra utilities

  " Taglist
  let g:Tlist_Auto_Highlight_Tag = 1                                          " highlight active tag (after a small inactivity period)
  let g:Tlist_Auto_Update = 1                                                 " process new files as they are opened
  let g:Tlist_Compact_Format = 1                                              " don't put line breaks between categories
  let g:Tlist_Enable_Fold_Column = 0                                          " show fold column in taglist window
  let g:Tlist_Exit_OnlyWindow = 1                                             " quit Vim when taglist is the only window open
  let g:Tlist_File_Fold_Auto_Close = 1                                        " automatically close folds corresponding to non active windows
  let g:Tlist_GainFocus_On_ToggleOpen = 0                                     " move cursor to taglist window when opening it
  let g:Tlist_Highlight_Tag_On_BufEnter = 1                                   " highlight active tag when entering a buffer
  let g:Tlist_Show_One_File = 1                                               " only show tags from active window
  let g:Tlist_Sort_Type = "name"                                              " tag sort order
  let g:Tlist_Use_Right_Window = 1                                            " put taglist window on the right
  let g:Tlist_WinWidth = 60                                                   " width of taglist window

  " Ultisnips
  let g:UltiSnipsSnippetsDir = g:runtimepath . '/snippets'                    " directory where to store snippets
  let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'snippets']               " where to look for snippets
  let g:UltiSnipsExpandTrigger = '<c-j>'                                      " key to trigger snippet
  let g:UltiSnipsListSnippets = '<c-y>'                                       " list snippets
  let g:ultisnips_python_style = 'sphinx'                                     " docstring format

  " Virtualenv
  let g:virtualenv_directory = '.'                                            " directory where to find virtualenv

  " Solarized
  let g:solarized_termtrans = 1                                               " transparent background sometimes
  let g:solarized_visibility = 'normal'                                       " visibility of 'list' characters

  call pathogen#infect()                                                      " load all plugins
  call pathogen#helptags()                                                    " create Vim help tags

  filetype plugin on                                                          " reenable per filetype loading
  syntax enable                                                               " activate syntax highlighting

  let s:loaded_plugins = 1

endif


" OPTIONS:

if !g:vimrc_disable_options && !exists('s:loaded_options')

  " general
  set encoding=utf-8                                                          " en-coh-ding
  set eadirection=hor                                                         " only resize automatically horizontally (cf. ``equalalways`` option)
  set hidden                                                                  " allow hidden buffers
  set lazyredraw                                                              " don't redraw during macros, etc.
  set magic                                                                   " use Vim magic regular expressions by default
  set modelines=0                                                             " read meta stuff from top or bottom of files
  set noautochdir                                                             " cwd is set differently (cf. ``s:smart_chdir`` function below)
  set nostartofline                                                           " keeps cursor on current column for movements like H, M, ...
  set number                                                                  " activate line numbers
  set sidescrolloff=5                                                         " allow 5 lines left/right of the cursor
  set scrolloff=5                                                             " allow 5 lines below/above the cursor
  set shell=/bin/bash\ --rcfile\ ~/.bashrc                                    " load .bashrc when starting shell from Vim
  set shellslash                                                              " use forward slashes for paths, always
  set showcmd                                                                 " show partial command and number of lines/columns selected
  set tag=./.tags;,.venvtags                                                  " tags files
  set ttimeoutlen=100                                                         " don't wait a second for wrong key codes to error out
  set virtualedit=block                                                       " let cursor move past the last char in <C-V> mode

  " text formatting
  set autoindent                                                              " keep indentation when going to new line
  set backspace=indent,eol,start                                              " allow backspace to delete new lines, etc.
  set comments-=:%                                                            " these shouldn't be considered comments by default
  set formatlistpat=^\\s*\\(\\d\\+\\\|[*+-]\\)[\\]:.)}\\t\ ]\\s*              " allow non numbered lists (starting by *+-)
  set formatoptions=rqnlj                                                     " only manual formatting by default
  set list                                                                    " show hidden characters (cf. ``listchar`` option below)
  set listchars=tab:¬\ ,trail:·                                               " which hidden characters to show
  set nojoinspaces                                                            " don't insert two spaces after punctuation on a join
  set linebreak                                                               " wrap lines at break characters (cf. ``wrap``)
  set nosmartindent                                                           " don't add extra indents, ever
  set textwidth=0                                                             " no maximum line length by default
  set wrap                                                                    " wrap long lines (disable ``list`` for this to work)

  " tabbing
  set expandtab                                                               " insert spaces instead of a tab when tabbing
  set shiftwidth=2                                                            " spaces used for indent keys (>>, ...) and for autoindent
  set shiftround                                                              " round to multiple of shiftwidth when indenting
  set tabstop=2                                                               " number of spaces a tab takes (displayed)

  " autocomplete
  set complete-=i                                                             " what to include when pressing <c-n> and <c-p> in insert mode
  set completefunc=syntaxcomplete#Complete                                    " default user completion using syntax keywords
  set completeopt=longest,menuone                                             " only insert longest common strings of suggestions
  set pumheight=20                                                            " maximum height of popup menu
  set wildignore=*.swp,*.bak,*.pyc,*.class                                    " don't show these files in file autocompletion
  set wildmenu                                                                " allow autocompletion with c-n
  set wildmode=longest,full                                                   " first complete common string before navigating through matches

  " history
  let &undodir = g:runtimepath . '/cache/undo'                                " saves directory
  let &viminfo .= ',n' . g:runtimepath . '/cache/info'                        " location of .viminfo file
  set undofile                                                                " allow persistence of undo history
  set undolevels=1000                                                         " number of operations used
  set undoreload=1000                                                         " number of operations stored

  " folds
  set fillchars="fold: "                                                      " don't show hyphens after folds
  set foldcolumn=2                                                            " width of the fold column
  set foldopen=mark,quickfix,tag,undo                                         " only open folds when using these commands
  set foldlevelstart=11                                                       " open all folds when opening new file
  set foldmethod=indent                                                       " fold by indent
  set foldminlines=0                                                          " allow folding of single lines
  set foldnestmax=10                                                          " maximum fold level

  " search
  set incsearch                                                               " highlight potential matches as search query is being typed
  set nohlsearch                                                              " don't highlight matches after executing search query
  set noignorecase                                                            " always respect case
  set smartcase                                                               " but in case we don't, respect it when uppercase is present

  " backups and swapfiles
  let &backupdir = g:runtimepath . '/cache/backup'                            " store them here
  let &directory = g:runtimepath . '/cache/swap'                              " we won't create swapfiles, but just in case
  set backup                                                                  " store existing files when overwriting
  set backupskip=/tmp/*,/private/tmp/*                                        " don't backup when editing these files (crontabs namely)
  set noswapfile                                                              " as we said, no swapfiles

  " theme
  silent! colorscheme solarized                                               " colorscheme (if available)
  set background=dark                                                         " theme
  set colorcolumn=+1                                                          " highlight after textwidth
  set nocursorcolumn                                                          " don't highlight the current column
  set nocursorline                                                            " or the current row
  set showbreak=                                                              " no characters shown after a linebreak
  set t_Co=256                                                                " terminal colors

  " status line
  set laststatus=2                                                            " always show status line
  set statusline=%<                                                           " truncate on left if too long
  set statusline+=%F\                                                         " full filepath
  set statusline+=%r                                                          " readonly flag [RO]
  set statusline+=%#pandocStrikeoutTable#                                     " highlighting start 
  set statusline+=%y                                                          " filetype
  set statusline+=%#ErrorMsg#                                                 " switch highlighting
  set statusline+=%m                                                          " modified flag [+] (or [-] if nomodifiable is set)
  set statusline+=%*                                                          " end highlighting
  set statusline+=%=                                                          " switch to right side
  set statusline+=%c,%l/%{&textwidth},%L\ [%p%%]                              " current column, current line / textwidth, total lines

  " spelling
  let &dictionary = '/usr/share/dict/words,'                                  " files where to load word for dictionary
  let &dictionary .= g:runtimepath . '/spell/custom-dictionary.utf-8.add'     " completion for use with <c-x><c-k>
  let &spellfile = g:runtimepath . '/spell/custom-dictionary.utf-8.add'       " file where to add new dictionary words
  set nospell                                                                 " no spellcheck on by default

  " disabled
  " syntax sync fromstart                                                     " otherwise folding messes up highlighting
  " let &viminfo .= ',n' . $HOME . '/.config/info/.viminfo'                   " location of .viminfo file
  " set statusline+=%{&modifiable?fugitive#statusline():''}\                  " current git branch (if any and if buffer modifiable)

  " highlighting
  highlight SignColumn ctermbg=none guibg=none

  let s:loaded_options = 1

endif


